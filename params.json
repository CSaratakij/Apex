{
  "name": "Apex",
  "tagline": "Apex is a high performance TCP reverse proxy server with load balancing capabilities.",
  "body": "# Apex\r\nApex is mainly build to act as a load balancer and to route traffic to the desired backend server with the capability to select between multiple balancing algorithms. Through the simplicity of the config file you can set it up really quick and it just works.\r\n\r\nA cool feature is that you can add or remove backend server through a very simple RESTful API and that these servers are automatically removed or added live to the load balancer\r\nand are directly accessible and usable.\r\nThe RESTful API also gives you the opportunity to get live traffic and general stats of Apex.\r\n\r\n# Overview\r\n\r\n- [Features](https://jackwhite20.github.io/Apex/#features)\r\n- [Installation](https://jackwhite20.github.io/Apex/#installation)\r\n- [Config](https://jackwhite20.github.io/Apex/#config)\r\n- [Real-World stats](https://jackwhite20.github.io/Apex/#real-world-stats)\r\n- [RESTful API](https://jackwhite20.github.io/Apex/#restful-api)\r\n\r\n# Features\r\n\r\n- built on top of [netty](https://github.com/netty/netty)\r\n- load balancing\r\n- multiple strategies (round robin, random, least connections, fastest)\r\n- dynamic server adding/removing/listing (simple RESTful API)\r\n- health check (ping probe, interval configurable in ms)\r\n- offline/online server management (removing and adding back to the LB)\r\n- configurable boss threads (1 should be fine for most normal use cases)\r\n- configurable worker threads (recommended value is cpu cores * 2)\r\n- logging (debug logging configurable)\r\n- live traffic and other stats\r\n- persistent total read/written stats\r\n\r\n# Installation\r\n\r\nFirst of all make sure you have Java 8 installed.\r\n\r\nDownload the latest Apex version from the [release page](https://github.com/JackWhite20/Apex/releases) and start it like this:\r\n\r\n```\r\njava -jar apex-1.6.0.jar\r\n```\r\n\r\nStop it by typing ```end``` followed by an enter press. Configure the config.cope file in the same directory to fit your needs and restart Apex.\r\n\r\n# Config\r\n\r\nVery simple but neat config format based on my project [Cope](https://jackwhite20.github.io/Cope/).\r\n\r\nAvailable balance strategies are:\r\n\r\n| Strategy  | Description |\r\n| --------- | ----------- |\r\n| ROUND_ROBIN | Typical round robin algorithm |\r\n| RANDOM | Random based selection |\r\n| LEAST_CON | The one with the least amount of connections |\r\n| FASTEST | The one with the fastest connection time |\r\n\r\n```ini\r\n# The first timeout value is read timeout\r\n# and the second one is write timeout\r\n# Both are in seconds\r\n#\r\n# The boss value is the amount of threads to accept connections\r\n# The worker value is the amount of threads to handle events\r\n#\r\n# If stats is true Apex will collect traffic stats that are \r\n# accessible through the RESTful API\r\ngeneral:\r\n    debug true\r\n    server 0.0.0.0 80\r\n    backlog 100\r\n    boss 1\r\n    worker 4\r\n    timeout 30 30\r\n    balance ROUND_ROBIN\r\n    probe 5000\r\n    stats true\r\n\r\n# How the RESTful API should be accessible\r\n# It is recommended to not bind this to 0.0.0.0\r\n# or to a specific external interface\r\nrest:\r\n    server localhost 6000\r\n\r\n# Here are all your backend servers\r\nbackend:\r\n    api-01 172.16.0.10 8080\r\n    api-02 172.16.0.11 8080\r\n    api-03 172.16.0.12 8080\r\n    api-04 172.16.0.13 8080\r\n```\r\n\r\n# Real-World stats\r\n\r\nApex was tested with over 200 connections (players) and a throughput of 150 Mbit/s.\r\nDuring the live load Apex only had 40-60% CPU usage with 1 boss thread and 4 worker threads on a 4 core 8 threads Xeon E3 CPU and a maximum RAM usage of 2 GB.\r\nSo Apex has only used 7.5% of the total CPU power which shows that it can be used nicely in a dynamic cloud infrastructure with small virtual machines.\r\nYou can definitely use multiple Apex instances through DNS-RB to fit your bandwidth and availability needs.\r\n\r\nAll balancing strategies were tested and all performed perfectly. The health check also works as it should, so it removes dead backend servers and adds these back when they are up again.\r\n\r\nAs you can see Apex is a high performance software load balancer with the focus in performance and efficiency. \r\nIt has many features to be as flexible and dynamically as possible but also to be simple.\r\n\r\nHardware details tested with:\r\n\r\nCPU model name: Intel(R) Xeon(R) CPU E3-1231 v3 @ 3.40GHz  \r\nOS name: Debian GNU/Linux 8 (jessie)  \r\nNIC/Uplink speed: 1 Gbit/s  \r\nRAM: 4 GB\r\n\r\n# RESTful API\r\n\r\nThe API consists of four simple GET paths. Two are with path variables to keep the adding and removing of backend server as simple as possible.\r\n\r\n| Path | Example | Description |\r\n| --------- | ----------- | ----------- |\r\n| /apex/add/{name}/{ip}/{port} | /apex/add/web-01/172.16.0.50/80 | Adds the given backend server to the load balancer |\r\n| /apex/remove/{name} | /apex/remove/web-01 | Removes the given backend server from the load balancer |\r\n| /apex/list | /apex/list | Lists the current backend servers which are in the load balancer |\r\n| /apex/stats | /apex/stats | Live traffic stats from Apex |\r\n\r\n_Responses:_\r\n\r\n| Path | Success | Error |\r\n| --------- | ----------- | ----------- |\r\n| /apex/add/{name}/{ip}/{port} | ```{\"status\":\"OK\",\"message\":\"Successfully added server\"}``` | ```{\"status\":\"SERVER_ALREADY_ADDED\",\"message\":\"Server was already added\"}``` |\r\n| /apex/remove/{name} | ```{\"status\":\"OK\",\"message\":\"Successfully removed server\"}``` | ```{\"status\":\"SERVER_NOT_FOUND\",\"message\":\"Server not found\"}``` |\r\n| /apex/list | ```{\"backendInfo\":[{\"name\":\"api-01\",\"host\":\"172.16.0.10\",\"port\":8080,\"connectTime\":125.0}],\"status\":\"OK\",\"message\":\"List received\"}``` | ```{\"status\":\"ERROR\",\"message\":\"Unable to get the balancing strategy\"}``` |\r\n| /apex/stats | ```{\"connections\":360,\"onlineBackendServers\":3,\"currentReadBytes\":500,\"currentWrittenBytes\":25356,\"lastReadThroughput\":36,\"lastWriteThroughput\":39864,\"totalReadBytes\":929,\"totalWrittenBytes\":705887}``` | ```{\"connections\":-1,\"onlineBackendServers\":-1,\"currentReadBytes\":-1,\"currentWriteBytes\":-1,\"lastReadThroughput\":-1,\"lastWriteThroughput\":-1,\"totalReadBytes\":-1,\"totalWrittenBytes\":-1,\"status\":\"ERROR\",\"message\":\"Stats are disabled\"}``` |\r\n\r\n### License\r\n\r\nLicensed under the GNU General Public License, Version 3.0.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}